打开浏览器，在上方地址栏输入网址的那一刻，这个回车按了之后，发生了很多事情。首先，计算机只懂0和1，也就是说人类的字母网址计算机是不懂的，它只认识IP地址，如果是IPV4那就是4组8位的二进制数字。为了人类方便，需要有一个把网址翻译成IP地址的服务，就是DNS
本地解析

IPV4就是现在使用的IP地址的版本4，总共32位，也就是说总的IP地址数有2的32次方，用点分十进制表示，同时还分为5类！想知道具体的买本书看看！因为IPV4的地址马上就要分完了，所以要使用IPV6
IPV6是IP地址的下一个版本6，理论上IP地址的个数有2的128次方，很多吧！用16进制表示，到IPV6的时代，世界上每个沙子都可以分配到一个IP！

　　dns模块包含两个类型的函数，其中一种是使用底层操作系统工具进行域名解析的函数，并不须要进行网络通信。这类函数只有一个：dns.lookup()

【dns.lookup(hostname[, options], callback)】

　　该方法将域名(比如'cnblogs.com')解析为第一条找到的记录 A (IPV4)或 AAAA(IPV6)。参数 options可以是一个对象或整数。如果没有提供 options，IP v4 和 v6 地址都可以。如果 options 是整数，则必须是 4 或 6

　　options参数包含以下属性

family:地址协议族，必须为4或6的整数
hints:设置getaddrinfo的标志，dns.ADDRCONFIG 或者 dns.V4MAPPED（ipv4映射成ipv6）
all:false（默认），布尔值，如设置为true，则返回IP数组，否则返回单个IP地址

var dns = require('dns');
dns.lookup('www.cnblogs.com', function(err, address, family){
    console.log(err);//null
    console.log(address);//218.11.2.249
    console.log(family);//4
});

　同一个域名，可能对应多个不同的ip。可以通过设置options = {all: true}来获取

var dns = require('dns');
dns.lookup('www.qq.com',{all:true}, function(err, address, family){
    console.log(err);//null
/*
[ { address: '125.39.240.113', family: 4 },
  { address: '61.135.157.156', family: 4 } ]
 */
    console.log(address);
    console.log(family);//undefined
});

网络解析
　　除dns.lookup()以外的所有dns模块中的函数，都需要连接到实际DNS服务器进行域名解析的函数，并且始终使用网络执行DNS查询

【dns.resolve(hostname[, rrtype], callback)】

　　该方法将一个域名（如 'cnblogs.com'）解析为一个 rrtype 指定记录类型的数组

　　有效的 rrtypes 值为:

'A' (IPV4 地址, 默认)
'AAAA' (IPV6 地址)
'MX' (邮件交换记录)
'TXT' (text 记录)
'SRV' (SRV 记录)
'PTR' (用来反向 IP 查找)
'NS' (域名服务器 记录)
'CNAME' (别名 记录)
'SOA' (授权记录的初始值)

var dns = require('dns');
//IPV4
dns.resolve('www.qq.com',function(err,address){
    console.log(address);//[ '125.39.240.113', '61.135.157.156' ]
});

//IPV6
dns.resolve('www.qq.com','AAAA',function(err,address){
    console.log(address);//[ '240e:e1:8100:28::2:16' ]
});

//别名
dns.resolve('www.qq.com','CNAME',function(err,address){
    console.log(address);//undefined
});

【dns.resolve4(hostname, callback)】
　　和 dns.resolve() 类似，仅能查询 IPv4 (A 记录）

var dns = require('dns');
dns.resolve4('www.qq.com',function(err,address){
    console.log(address);//[ '125.39.240.113', '61.135.157.156' ]
});

【dns.reverse(ip, callback)】
　　该方法用于反向解析 IP 地址，返回指向该 IP 地址的域名数组。回调函数参数 (err, hostnames)。出错时，参数err 是 Error 对象，err.code是错误代码

var dns = require('dns');
dns.reverse('114.114.114.114',function(err,hostnames){
    console.log(hostnames);//'public1.114dns.com'
});


