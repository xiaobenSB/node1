我们要开发的是商城，所以商品最为关键。

总结：创建一张表时,该表最好是祖父级和父级和子级结构，不可以两个祖父级和父级，子级可以是该父级所有子级，但不可以设置子级的子级（只有一个子级并该子级不是多种形式
    (如：规格是多种形式)，你可以把该子级的子级设置在表里，因为不是多种形式不用到时前端取这个子级时还要切割，并且子级的子级还要切割才能获取到正确数据），如果想设就建新一
     张表，该子级就为变成新表的父级，子级的子级变成新表的子级，祖父级或父级可以为新表的祖父级，因为是通过最先祖父级和父级，才能找到子级，并找到
     子级的子级。也就是他们等同于一张表，只是创建新表为了好区分，好获取。

首页创建一个商品表：
                   商品属性对应字段设置，如：标识商品唯一的字段。我们要知道商品是不断更新，不可能设置一次商品就固定该属性了，也就是数据是动态，
                   可变的。所以我们知道字段的值是可更新的，除了标识商品唯一的字段，因为你把商品显示出来，并且每个商品都有自己的属性，我们只需要
                   通过商品的标识字段去找到属于该商品的属性，如果没有字段，就无法区分哪个商品哪个商品。但是有时有些属性是不固定，如商品的规格：
                   可以能会有白色，可以会有蓝色。所以这种属性如果你要一个字段存一个规格是不可能的，因为不固定所以不知道要设置几个字段。
                   
                   对应不固定商品属性解决：1.你可以把它们都放在一个字段里，用符号去拼接一个个规格，不管它们来多少个。我们前端就可以去截取符号去获取
                   一个一个规格。2.你可以设置在新的表（简称规格表）里，这样一个规格就可以存一行字段了，你只需要在该行字段添加对应商品的标识就可以了。比如：你获取了
                   商品表，并显示商品数据，但你还想要获取他是否有设置到规格时，你就可以通过该商品的标识字段是规格表里判断是否有设置到该标识字段的规格
                   （也就是商品的规格）.
                   
                   第一种好处，你只需要读一张表就可以获取到该商品的所有属性数据。缺点：字段的值拼接过多可能不好区分。
                   第二种好处，可以把商品的属性给独立出来成为一张表，你就可以知道该表是专门存这个属性的，并且只需设置该属性信息字段和商品标识几个字段
                   而已，可以很好的知道该属性是什么。缺点：如果每个商品的属性都独立出来的话不现实，因为太多表，我们前端去取数据时要去找个个表很麻烦.
                   而且表太多后端看起来也眼花，所以独立出来的属性要慎重思考，如：该属性可能对应很多个属性。比如，规格，有不同规格分别对应商品的大小
                   或颜色等等，并且有对应的数量，图片等等。我们不可能都放置在商品表里，如，你获取一个商品，然后你获取规格时，你发现拼接了两个字符，
                   然后你截取字符知道有两个规格，但你还想获取该规格对应的商品图片和商品数量和商品金额时，你虽然可以都设置在商品表里，但会造成得设置对应
                   字段所以就会出现商品表里的字段过多，而且规格不仅一个，有两个甚至是无数个，你又像拼接规格那样拼接不同规格对应的数据，就会造成该表
                   每行数据量都很大，字段过多不好预览并区分出来
                   
                   所以这种情况可以把规格独立出来，我们有两个规格就在规格表里建两行数据，每行数据都有自己的图片数量金额等等，相同的是它们都属于同个商品
                   里面的，因为商品标识字段一样，当我们获取到商品时，想获取该商品的规格时就可以通过该商品的标识字段去规格表里查询对应的规格数据，我们就
                   可以知道这个商品有两个规格，对应了不同的图片数量金额，我们就可以不用去截取字符来区分该规格对应的一个个属性
                   
                   
                  好处，当一个商品多个规格时，一个个规格对应的所有自身属包括自身都存在一行数据里，前端只需把它们全部取出来循环就可以得到不同规格对应
                  的属性数据
                  
                  也就是你可以在商品表里添加商品属性，但如果有商品属性需要引用对应的属性时，你可以也在商品表里添加对应的属性，但如果该商品属性有几种的，
                  你就要考虑拼接然后前端切割，但最后是该商品属性只有三种或以下，因为你后端可以好拼接，但你前端要把该商品属性对应的属性数据一个个切割才能
                  得到每种商品属性对应的属性，效率就会很低下，并且该商品属性对应的属性如果很多，你前端的一个个根据属性名去获取就会麻烦
                  
                  并且该商品属性对应的属性是只属于该商品属性的，也就是不关你当前的商品的事，因为你当前商品没有用到，只是做个中间关系，只是商品属性用到，所以可以把他们放在新的
                  一张表，然后保留商品标识字段值，前端通过商品的标识字段值去
                  
                  也就是商品为一个父级，它的所有子级都是属于他的，可以创一个表存放它的子级，只要该表有商品（父级）的标识字段，那么我们就可以通过标识字段
                  找到它所有的子级了，但如果它子级也有自己的子级时，如果把它放在父级里，那么就会混乱父级，因为我们刚开始建的表的时候知道该表是存放商品父级
                  和它子级的，也就是二级，但如果子级还有子级那么就等于三级了，而一个表里最好是存二级，因为我们知道父级就可以找到它子级，而子级再找子级时，
                  如果还设置在他父级里，那就得区分字段名很麻烦，而且你有时还不止一个子级要找自己子级，如果有很多个时，你有不可能全都放在父级里，然后一个个
                  去找属于自己的字段，那样逻辑就会很繁琐。如：一个商品有多种规格，你可以把规格当成商品的子级，但该子级还要找对应的子级属性（如：图片，金额，数量），
                  把多种规格的子级属性都设置在商品里就会很难区分，这还是同意义的（也就是商品多种规格可以用拼接，因为他们对应的字段名相同，只是值不同），如果是
                  两种没有关联的子级时你设置在商品里，你要区分的字段就会更多
                  
                  所以我们在建表时考虑该表是存放二级数据的，也就是父级（商品）和子级，当子级还有子级时，我们就要考虑把该子级的子级弄在新的一张表里存放，由于我们是通过
                  父级，然后找子级，子级再找子级的方式，如果弄一张新的表存子级的子级，可以在该表里同样可以设置父级为商品，子级可以为之前需要引用的子级和子级要引用子级，
                  因为之前父级里设置的子级都是父级需要用到的，子级的子级该父级不需要，只是通过父级来找到子级然后再找对应的子级，所以需要的是父级的子级，但由于是通过父级
                  才能开始找子级的子级,所以子级的子级等于限制于父级，而子级和子级的子级这些字段属性都可以规划成一个子级，因为他们都限制于商品父级，
                 为什么商品父级的子级和子级的子级为什么不可以规划在一起，那是由于父级里还有其他子级，跟需要引用子级的子级是不同意义的，子级跟子级的子级就代表同个意义
                
